/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "ISDKTransferRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISDKTransferRouter__factory>;
    getContractFactory(
      name: "ERC20ToppSignalPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20ToppSignalPool__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "IPriceOracleCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracleCaller__factory>;
    getContractFactory(
      name: "IRandomOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRandomOracle__factory>;
    getContractFactory(
      name: "IRandomOracleCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRandomOracleCaller__factory>;
    getContractFactory(
      name: "ISignalTicket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignalTicket__factory>;
    getContractFactory(
      name: "IToppSignalPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IToppSignalPool__factory>;
    getContractFactory(
      name: "KUBTopSignalPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KUBTopSignalPool__factory>;
    getContractFactory(
      name: "SimplePriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimplePriceOracle__factory>;
    getContractFactory(
      name: "SimpleRandomOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SimpleRandomOracle__factory>;
    getContractFactory(
      name: "SignalTicketERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignalTicketERC1155__factory>;
    getContractFactory(
      name: "SignalTicketKAP20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignalTicketKAP20__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "TestPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestPriceOracle__factory>;
    getContractFactory(
      name: "TestPriceOracleCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestPriceOracleCaller__factory>;
    getContractFactory(
      name: "TestRandomOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRandomOracle__factory>;
    getContractFactory(
      name: "TestRandomOracleCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestRandomOracleCaller__factory>;
    getContractFactory(
      name: "AccessController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessController__factory>;
    getContractFactory(
      name: "Authorization",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Authorization__factory>;
    getContractFactory(
      name: "Committee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Committee__factory>;
    getContractFactory(
      name: "IAdminProjectRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAdminProjectRouter__factory>;
    getContractFactory(
      name: "IKAP20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKAP20__factory>;
    getContractFactory(
      name: "IKToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKToken__factory>;
    getContractFactory(
      name: "IKYCBitkubChain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKYCBitkubChain__factory>;
    getContractFactory(
      name: "KAP20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KAP20__factory>;
    getContractFactory(
      name: "KYCHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KYCHandler__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "KKUB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KKUB__factory>;
    getContractFactory(
      name: "ToppSignalPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ToppSignalPool__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC1155",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "ISDKTransferRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISDKTransferRouter>;
    getContractAt(
      name: "ERC20ToppSignalPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20ToppSignalPool>;
    getContractAt(
      name: "IPriceOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "IPriceOracleCaller",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracleCaller>;
    getContractAt(
      name: "IRandomOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRandomOracle>;
    getContractAt(
      name: "IRandomOracleCaller",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRandomOracleCaller>;
    getContractAt(
      name: "ISignalTicket",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignalTicket>;
    getContractAt(
      name: "IToppSignalPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IToppSignalPool>;
    getContractAt(
      name: "KUBTopSignalPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KUBTopSignalPool>;
    getContractAt(
      name: "SimplePriceOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SimplePriceOracle>;
    getContractAt(
      name: "SimpleRandomOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SimpleRandomOracle>;
    getContractAt(
      name: "SignalTicketERC1155",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SignalTicketERC1155>;
    getContractAt(
      name: "SignalTicketKAP20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SignalTicketKAP20>;
    getContractAt(
      name: "TestERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "TestPriceOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestPriceOracle>;
    getContractAt(
      name: "TestPriceOracleCaller",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestPriceOracleCaller>;
    getContractAt(
      name: "TestRandomOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRandomOracle>;
    getContractAt(
      name: "TestRandomOracleCaller",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestRandomOracleCaller>;
    getContractAt(
      name: "AccessController",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessController>;
    getContractAt(
      name: "Authorization",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Authorization>;
    getContractAt(
      name: "Committee",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Committee>;
    getContractAt(
      name: "IAdminProjectRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAdminProjectRouter>;
    getContractAt(
      name: "IKAP20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IKAP20>;
    getContractAt(
      name: "IKToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IKToken>;
    getContractAt(
      name: "IKYCBitkubChain",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IKYCBitkubChain>;
    getContractAt(
      name: "KAP20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KAP20>;
    getContractAt(
      name: "KYCHandler",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KYCHandler>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "KKUB",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KKUB>;
    getContractAt(
      name: "ToppSignalPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ToppSignalPool>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155>;
    deployContract(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155MetadataURI>;
    deployContract(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155>;
    deployContract(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Receiver>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "ISDKTransferRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISDKTransferRouter>;
    deployContract(
      name: "ERC20ToppSignalPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20ToppSignalPool>;
    deployContract(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceOracle>;
    deployContract(
      name: "IPriceOracleCaller",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceOracleCaller>;
    deployContract(
      name: "IRandomOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRandomOracle>;
    deployContract(
      name: "IRandomOracleCaller",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRandomOracleCaller>;
    deployContract(
      name: "ISignalTicket",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISignalTicket>;
    deployContract(
      name: "IToppSignalPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IToppSignalPool>;
    deployContract(
      name: "KUBTopSignalPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KUBTopSignalPool>;
    deployContract(
      name: "SimplePriceOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SimplePriceOracle>;
    deployContract(
      name: "SimpleRandomOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SimpleRandomOracle>;
    deployContract(
      name: "SignalTicketERC1155",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SignalTicketERC1155>;
    deployContract(
      name: "SignalTicketKAP20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SignalTicketKAP20>;
    deployContract(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestERC20>;
    deployContract(
      name: "TestPriceOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestPriceOracle>;
    deployContract(
      name: "TestPriceOracleCaller",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestPriceOracleCaller>;
    deployContract(
      name: "TestRandomOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestRandomOracle>;
    deployContract(
      name: "TestRandomOracleCaller",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestRandomOracleCaller>;
    deployContract(
      name: "AccessController",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessController>;
    deployContract(
      name: "Authorization",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Authorization>;
    deployContract(
      name: "Committee",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Committee>;
    deployContract(
      name: "IAdminProjectRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAdminProjectRouter>;
    deployContract(
      name: "IKAP20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKAP20>;
    deployContract(
      name: "IKToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKToken>;
    deployContract(
      name: "IKYCBitkubChain",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKYCBitkubChain>;
    deployContract(
      name: "KAP20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KAP20>;
    deployContract(
      name: "KYCHandler",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KYCHandler>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "KKUB",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KKUB>;
    deployContract(
      name: "ToppSignalPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ToppSignalPool>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC1155",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155>;
    deployContract(
      name: "IERC1155MetadataURI",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155MetadataURI>;
    deployContract(
      name: "IERC1155",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155>;
    deployContract(
      name: "IERC1155Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Receiver>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "ISDKTransferRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISDKTransferRouter>;
    deployContract(
      name: "ERC20ToppSignalPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20ToppSignalPool>;
    deployContract(
      name: "IPriceOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceOracle>;
    deployContract(
      name: "IPriceOracleCaller",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceOracleCaller>;
    deployContract(
      name: "IRandomOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRandomOracle>;
    deployContract(
      name: "IRandomOracleCaller",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRandomOracleCaller>;
    deployContract(
      name: "ISignalTicket",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISignalTicket>;
    deployContract(
      name: "IToppSignalPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IToppSignalPool>;
    deployContract(
      name: "KUBTopSignalPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KUBTopSignalPool>;
    deployContract(
      name: "SimplePriceOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SimplePriceOracle>;
    deployContract(
      name: "SimpleRandomOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SimpleRandomOracle>;
    deployContract(
      name: "SignalTicketERC1155",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SignalTicketERC1155>;
    deployContract(
      name: "SignalTicketKAP20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SignalTicketKAP20>;
    deployContract(
      name: "TestERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestERC20>;
    deployContract(
      name: "TestPriceOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestPriceOracle>;
    deployContract(
      name: "TestPriceOracleCaller",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestPriceOracleCaller>;
    deployContract(
      name: "TestRandomOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestRandomOracle>;
    deployContract(
      name: "TestRandomOracleCaller",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestRandomOracleCaller>;
    deployContract(
      name: "AccessController",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessController>;
    deployContract(
      name: "Authorization",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Authorization>;
    deployContract(
      name: "Committee",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Committee>;
    deployContract(
      name: "IAdminProjectRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAdminProjectRouter>;
    deployContract(
      name: "IKAP20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKAP20>;
    deployContract(
      name: "IKToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKToken>;
    deployContract(
      name: "IKYCBitkubChain",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKYCBitkubChain>;
    deployContract(
      name: "KAP20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KAP20>;
    deployContract(
      name: "KYCHandler",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KYCHandler>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "KKUB",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KKUB>;
    deployContract(
      name: "ToppSignalPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ToppSignalPool>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
