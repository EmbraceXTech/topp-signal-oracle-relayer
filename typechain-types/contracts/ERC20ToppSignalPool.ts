/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ERC20ToppSignalPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EXACT_POOL_PORTION"
      | "FEE_POOL_PORTION"
      | "FORTUNE_POOL_PORTIONS"
      | "PROXIMITY_POOL_PORTIONS"
      | "RESERVE_POOL_PORTION"
      | "TOTAL_POOL_PORTION"
      | "claimPrizes"
      | "collectFee"
      | "collectReserve"
      | "currency"
      | "feeCollector"
      | "fulfillPrice"
      | "fulfillRandomness"
      | "maxTicketPerSlot"
      | "placeBid"
      | "priceOracle"
      | "priceOracleFulfilled"
      | "randomOracle"
      | "randomOracleFulfilled"
      | "randomOracleResults"
      | "reservePool"
      | "settle"
      | "settledClosest"
      | "settledClosestWeights"
      | "settledExact"
      | "settledExactWeight"
      | "settledLucky"
      | "settledLuckyWeights"
      | "slotPrices"
      | "slotReward"
      | "slotStatus"
      | "slotWeights"
      | "ticket"
      | "ticketPrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BidPlaced"
      | "ClaimedClosestPrize"
      | "ClaimedExactPrize"
      | "ClaimedLuckyPrize"
      | "CollectedFee"
      | "CollectedReserve"
      | "SettleFulfilled"
      | "Settled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EXACT_POOL_PORTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_POOL_PORTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FORTUNE_POOL_PORTIONS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "PROXIMITY_POOL_PORTIONS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "RESERVE_POOL_PORTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_POOL_PORTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrizes",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectReserve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "currency", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRandomness",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTicketPerSlot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracleFulfilled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "randomOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomOracleFulfilled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "randomOracleResults",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reservePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settledClosest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settledClosestWeights",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settledExact",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settledExactWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settledLucky",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settledLuckyWeights",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slotPrices",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slotReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slotStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slotWeights",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ticket", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "EXACT_POOL_PORTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_POOL_PORTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FORTUNE_POOL_PORTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROXIMITY_POOL_PORTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESERVE_POOL_PORTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_POOL_PORTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPrizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collectFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currency", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRandomness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTicketPerSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracleFulfilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomOracleFulfilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomOracleResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settledClosest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settledClosestWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settledExact",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settledExactWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settledLucky",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settledLuckyWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slotPrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slotReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slotStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "slotWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ticket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    time: BigNumberish,
    price: BigNumberish,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    time: bigint,
    price: bigint,
    bidder: string,
    amount: bigint
  ];
  export interface OutputObject {
    time: bigint;
    price: bigint;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedClosestPrizeEvent {
  export type InputTuple = [
    time: BigNumberish,
    index: BigNumberish,
    claimer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    time: bigint,
    index: bigint,
    claimer: string,
    amount: bigint
  ];
  export interface OutputObject {
    time: bigint;
    index: bigint;
    claimer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedExactPrizeEvent {
  export type InputTuple = [
    time: BigNumberish,
    claimer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [time: bigint, claimer: string, amount: bigint];
  export interface OutputObject {
    time: bigint;
    claimer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedLuckyPrizeEvent {
  export type InputTuple = [
    time: BigNumberish,
    index: BigNumberish,
    claimer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    time: bigint,
    index: bigint,
    claimer: string,
    amount: bigint
  ];
  export interface OutputObject {
    time: bigint;
    index: bigint;
    claimer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectedFeeEvent {
  export type InputTuple = [time: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [time: bigint, amount: bigint];
  export interface OutputObject {
    time: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectedReserveEvent {
  export type InputTuple = [time: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [time: bigint, amount: bigint];
  export interface OutputObject {
    time: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettleFulfilledEvent {
  export type InputTuple = [time: BigNumberish, oraclePrice: BigNumberish];
  export type OutputTuple = [time: bigint, oraclePrice: bigint];
  export interface OutputObject {
    time: bigint;
    oraclePrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettledEvent {
  export type InputTuple = [time: BigNumberish];
  export type OutputTuple = [time: bigint];
  export interface OutputObject {
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC20ToppSignalPool extends BaseContract {
  connect(runner?: ContractRunner | null): ERC20ToppSignalPool;
  waitForDeployment(): Promise<this>;

  interface: ERC20ToppSignalPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EXACT_POOL_PORTION: TypedContractMethod<[], [bigint], "view">;

  FEE_POOL_PORTION: TypedContractMethod<[], [bigint], "view">;

  FORTUNE_POOL_PORTIONS: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  PROXIMITY_POOL_PORTIONS: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  RESERVE_POOL_PORTION: TypedContractMethod<[], [bigint], "view">;

  TOTAL_POOL_PORTION: TypedContractMethod<[], [bigint], "view">;

  claimPrizes: TypedContractMethod<
    [time: BigNumberish, price: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  collectFee: TypedContractMethod<[time: BigNumberish], [void], "nonpayable">;

  collectReserve: TypedContractMethod<
    [time: BigNumberish],
    [void],
    "nonpayable"
  >;

  currency: TypedContractMethod<[], [string], "view">;

  feeCollector: TypedContractMethod<[], [string], "view">;

  fulfillPrice: TypedContractMethod<
    [time: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  fulfillRandomness: TypedContractMethod<
    [time: BigNumberish, values: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  maxTicketPerSlot: TypedContractMethod<[], [bigint], "view">;

  placeBid: TypedContractMethod<
    [time: BigNumberish, price: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  priceOracle: TypedContractMethod<[], [string], "view">;

  priceOracleFulfilled: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  randomOracle: TypedContractMethod<[], [string], "view">;

  randomOracleFulfilled: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  randomOracleResults: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  reservePool: TypedContractMethod<[], [string], "view">;

  settle: TypedContractMethod<[time: BigNumberish], [void], "nonpayable">;

  settledClosest: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  settledClosestWeights: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  settledExact: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  settledExactWeight: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  settledLucky: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  settledLuckyWeights: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  slotPrices: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  slotReward: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  slotStatus: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  slotWeights: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  ticket: TypedContractMethod<[], [string], "view">;

  ticketPrice: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EXACT_POOL_PORTION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_POOL_PORTION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FORTUNE_POOL_PORTIONS"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "PROXIMITY_POOL_PORTIONS"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "RESERVE_POOL_PORTION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOTAL_POOL_PORTION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimPrizes"
  ): TypedContractMethod<
    [time: BigNumberish, price: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectFee"
  ): TypedContractMethod<[time: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectReserve"
  ): TypedContractMethod<[time: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currency"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fulfillPrice"
  ): TypedContractMethod<
    [time: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fulfillRandomness"
  ): TypedContractMethod<
    [time: BigNumberish, values: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxTicketPerSlot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<
    [time: BigNumberish, price: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceOracleFulfilled"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "randomOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "randomOracleFulfilled"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "randomOracleResults"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "reservePool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "settle"
  ): TypedContractMethod<[time: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settledClosest"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "settledClosestWeights"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "settledExact"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "settledExactWeight"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "settledLucky"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "settledLuckyWeights"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "slotPrices"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "slotReward"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "slotStatus"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "slotWeights"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "ticket"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ticketPrice"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimedClosestPrize"
  ): TypedContractEvent<
    ClaimedClosestPrizeEvent.InputTuple,
    ClaimedClosestPrizeEvent.OutputTuple,
    ClaimedClosestPrizeEvent.OutputObject
  >;
  getEvent(
    key: "ClaimedExactPrize"
  ): TypedContractEvent<
    ClaimedExactPrizeEvent.InputTuple,
    ClaimedExactPrizeEvent.OutputTuple,
    ClaimedExactPrizeEvent.OutputObject
  >;
  getEvent(
    key: "ClaimedLuckyPrize"
  ): TypedContractEvent<
    ClaimedLuckyPrizeEvent.InputTuple,
    ClaimedLuckyPrizeEvent.OutputTuple,
    ClaimedLuckyPrizeEvent.OutputObject
  >;
  getEvent(
    key: "CollectedFee"
  ): TypedContractEvent<
    CollectedFeeEvent.InputTuple,
    CollectedFeeEvent.OutputTuple,
    CollectedFeeEvent.OutputObject
  >;
  getEvent(
    key: "CollectedReserve"
  ): TypedContractEvent<
    CollectedReserveEvent.InputTuple,
    CollectedReserveEvent.OutputTuple,
    CollectedReserveEvent.OutputObject
  >;
  getEvent(
    key: "SettleFulfilled"
  ): TypedContractEvent<
    SettleFulfilledEvent.InputTuple,
    SettleFulfilledEvent.OutputTuple,
    SettleFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "Settled"
  ): TypedContractEvent<
    SettledEvent.InputTuple,
    SettledEvent.OutputTuple,
    SettledEvent.OutputObject
  >;

  filters: {
    "BidPlaced(uint256,uint256,address,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;

    "ClaimedClosestPrize(uint256,uint256,address,uint256)": TypedContractEvent<
      ClaimedClosestPrizeEvent.InputTuple,
      ClaimedClosestPrizeEvent.OutputTuple,
      ClaimedClosestPrizeEvent.OutputObject
    >;
    ClaimedClosestPrize: TypedContractEvent<
      ClaimedClosestPrizeEvent.InputTuple,
      ClaimedClosestPrizeEvent.OutputTuple,
      ClaimedClosestPrizeEvent.OutputObject
    >;

    "ClaimedExactPrize(uint256,address,uint256)": TypedContractEvent<
      ClaimedExactPrizeEvent.InputTuple,
      ClaimedExactPrizeEvent.OutputTuple,
      ClaimedExactPrizeEvent.OutputObject
    >;
    ClaimedExactPrize: TypedContractEvent<
      ClaimedExactPrizeEvent.InputTuple,
      ClaimedExactPrizeEvent.OutputTuple,
      ClaimedExactPrizeEvent.OutputObject
    >;

    "ClaimedLuckyPrize(uint256,uint256,address,uint256)": TypedContractEvent<
      ClaimedLuckyPrizeEvent.InputTuple,
      ClaimedLuckyPrizeEvent.OutputTuple,
      ClaimedLuckyPrizeEvent.OutputObject
    >;
    ClaimedLuckyPrize: TypedContractEvent<
      ClaimedLuckyPrizeEvent.InputTuple,
      ClaimedLuckyPrizeEvent.OutputTuple,
      ClaimedLuckyPrizeEvent.OutputObject
    >;

    "CollectedFee(uint256,uint256)": TypedContractEvent<
      CollectedFeeEvent.InputTuple,
      CollectedFeeEvent.OutputTuple,
      CollectedFeeEvent.OutputObject
    >;
    CollectedFee: TypedContractEvent<
      CollectedFeeEvent.InputTuple,
      CollectedFeeEvent.OutputTuple,
      CollectedFeeEvent.OutputObject
    >;

    "CollectedReserve(uint256,uint256)": TypedContractEvent<
      CollectedReserveEvent.InputTuple,
      CollectedReserveEvent.OutputTuple,
      CollectedReserveEvent.OutputObject
    >;
    CollectedReserve: TypedContractEvent<
      CollectedReserveEvent.InputTuple,
      CollectedReserveEvent.OutputTuple,
      CollectedReserveEvent.OutputObject
    >;

    "SettleFulfilled(uint256,uint256)": TypedContractEvent<
      SettleFulfilledEvent.InputTuple,
      SettleFulfilledEvent.OutputTuple,
      SettleFulfilledEvent.OutputObject
    >;
    SettleFulfilled: TypedContractEvent<
      SettleFulfilledEvent.InputTuple,
      SettleFulfilledEvent.OutputTuple,
      SettleFulfilledEvent.OutputObject
    >;

    "Settled(uint256)": TypedContractEvent<
      SettledEvent.InputTuple,
      SettledEvent.OutputTuple,
      SettledEvent.OutputObject
    >;
    Settled: TypedContractEvent<
      SettledEvent.InputTuple,
      SettledEvent.OutputTuple,
      SettledEvent.OutputObject
    >;
  };
}
