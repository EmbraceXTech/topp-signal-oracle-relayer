/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface IToppSignalPoolInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "BidPlaced"
      | "ClaimedClosestPrize"
      | "ClaimedExactPrize"
      | "ClaimedLuckyPrize"
      | "CollectedFee"
      | "CollectedReserve"
      | "SettleFulfilled"
      | "Settled"
  ): EventFragment;
}

export namespace BidPlacedEvent {
  export type InputTuple = [
    time: BigNumberish,
    price: BigNumberish,
    bidder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    time: bigint,
    price: bigint,
    bidder: string,
    amount: bigint
  ];
  export interface OutputObject {
    time: bigint;
    price: bigint;
    bidder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedClosestPrizeEvent {
  export type InputTuple = [
    time: BigNumberish,
    index: BigNumberish,
    claimer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    time: bigint,
    index: bigint,
    claimer: string,
    amount: bigint
  ];
  export interface OutputObject {
    time: bigint;
    index: bigint;
    claimer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedExactPrizeEvent {
  export type InputTuple = [
    time: BigNumberish,
    claimer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [time: bigint, claimer: string, amount: bigint];
  export interface OutputObject {
    time: bigint;
    claimer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedLuckyPrizeEvent {
  export type InputTuple = [
    time: BigNumberish,
    index: BigNumberish,
    claimer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    time: bigint,
    index: bigint,
    claimer: string,
    amount: bigint
  ];
  export interface OutputObject {
    time: bigint;
    index: bigint;
    claimer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectedFeeEvent {
  export type InputTuple = [time: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [time: bigint, amount: bigint];
  export interface OutputObject {
    time: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectedReserveEvent {
  export type InputTuple = [time: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [time: bigint, amount: bigint];
  export interface OutputObject {
    time: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettleFulfilledEvent {
  export type InputTuple = [time: BigNumberish, oraclePrice: BigNumberish];
  export type OutputTuple = [time: bigint, oraclePrice: bigint];
  export interface OutputObject {
    time: bigint;
    oraclePrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettledEvent {
  export type InputTuple = [time: BigNumberish];
  export type OutputTuple = [time: bigint];
  export interface OutputObject {
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IToppSignalPool extends BaseContract {
  connect(runner?: ContractRunner | null): IToppSignalPool;
  waitForDeployment(): Promise<this>;

  interface: IToppSignalPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "BidPlaced"
  ): TypedContractEvent<
    BidPlacedEvent.InputTuple,
    BidPlacedEvent.OutputTuple,
    BidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimedClosestPrize"
  ): TypedContractEvent<
    ClaimedClosestPrizeEvent.InputTuple,
    ClaimedClosestPrizeEvent.OutputTuple,
    ClaimedClosestPrizeEvent.OutputObject
  >;
  getEvent(
    key: "ClaimedExactPrize"
  ): TypedContractEvent<
    ClaimedExactPrizeEvent.InputTuple,
    ClaimedExactPrizeEvent.OutputTuple,
    ClaimedExactPrizeEvent.OutputObject
  >;
  getEvent(
    key: "ClaimedLuckyPrize"
  ): TypedContractEvent<
    ClaimedLuckyPrizeEvent.InputTuple,
    ClaimedLuckyPrizeEvent.OutputTuple,
    ClaimedLuckyPrizeEvent.OutputObject
  >;
  getEvent(
    key: "CollectedFee"
  ): TypedContractEvent<
    CollectedFeeEvent.InputTuple,
    CollectedFeeEvent.OutputTuple,
    CollectedFeeEvent.OutputObject
  >;
  getEvent(
    key: "CollectedReserve"
  ): TypedContractEvent<
    CollectedReserveEvent.InputTuple,
    CollectedReserveEvent.OutputTuple,
    CollectedReserveEvent.OutputObject
  >;
  getEvent(
    key: "SettleFulfilled"
  ): TypedContractEvent<
    SettleFulfilledEvent.InputTuple,
    SettleFulfilledEvent.OutputTuple,
    SettleFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "Settled"
  ): TypedContractEvent<
    SettledEvent.InputTuple,
    SettledEvent.OutputTuple,
    SettledEvent.OutputObject
  >;

  filters: {
    "BidPlaced(uint256,uint256,address,uint256)": TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;
    BidPlaced: TypedContractEvent<
      BidPlacedEvent.InputTuple,
      BidPlacedEvent.OutputTuple,
      BidPlacedEvent.OutputObject
    >;

    "ClaimedClosestPrize(uint256,uint256,address,uint256)": TypedContractEvent<
      ClaimedClosestPrizeEvent.InputTuple,
      ClaimedClosestPrizeEvent.OutputTuple,
      ClaimedClosestPrizeEvent.OutputObject
    >;
    ClaimedClosestPrize: TypedContractEvent<
      ClaimedClosestPrizeEvent.InputTuple,
      ClaimedClosestPrizeEvent.OutputTuple,
      ClaimedClosestPrizeEvent.OutputObject
    >;

    "ClaimedExactPrize(uint256,address,uint256)": TypedContractEvent<
      ClaimedExactPrizeEvent.InputTuple,
      ClaimedExactPrizeEvent.OutputTuple,
      ClaimedExactPrizeEvent.OutputObject
    >;
    ClaimedExactPrize: TypedContractEvent<
      ClaimedExactPrizeEvent.InputTuple,
      ClaimedExactPrizeEvent.OutputTuple,
      ClaimedExactPrizeEvent.OutputObject
    >;

    "ClaimedLuckyPrize(uint256,uint256,address,uint256)": TypedContractEvent<
      ClaimedLuckyPrizeEvent.InputTuple,
      ClaimedLuckyPrizeEvent.OutputTuple,
      ClaimedLuckyPrizeEvent.OutputObject
    >;
    ClaimedLuckyPrize: TypedContractEvent<
      ClaimedLuckyPrizeEvent.InputTuple,
      ClaimedLuckyPrizeEvent.OutputTuple,
      ClaimedLuckyPrizeEvent.OutputObject
    >;

    "CollectedFee(uint256,uint256)": TypedContractEvent<
      CollectedFeeEvent.InputTuple,
      CollectedFeeEvent.OutputTuple,
      CollectedFeeEvent.OutputObject
    >;
    CollectedFee: TypedContractEvent<
      CollectedFeeEvent.InputTuple,
      CollectedFeeEvent.OutputTuple,
      CollectedFeeEvent.OutputObject
    >;

    "CollectedReserve(uint256,uint256)": TypedContractEvent<
      CollectedReserveEvent.InputTuple,
      CollectedReserveEvent.OutputTuple,
      CollectedReserveEvent.OutputObject
    >;
    CollectedReserve: TypedContractEvent<
      CollectedReserveEvent.InputTuple,
      CollectedReserveEvent.OutputTuple,
      CollectedReserveEvent.OutputObject
    >;

    "SettleFulfilled(uint256,uint256)": TypedContractEvent<
      SettleFulfilledEvent.InputTuple,
      SettleFulfilledEvent.OutputTuple,
      SettleFulfilledEvent.OutputObject
    >;
    SettleFulfilled: TypedContractEvent<
      SettleFulfilledEvent.InputTuple,
      SettleFulfilledEvent.OutputTuple,
      SettleFulfilledEvent.OutputObject
    >;

    "Settled(uint256)": TypedContractEvent<
      SettledEvent.InputTuple,
      SettledEvent.OutputTuple,
      SettledEvent.OutputObject
    >;
    Settled: TypedContractEvent<
      SettledEvent.InputTuple,
      SettledEvent.OutputTuple,
      SettledEvent.OutputObject
    >;
  };
}
