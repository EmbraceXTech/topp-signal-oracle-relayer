/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface AccessControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PROJECT"
      | "acceptedKYCLevel"
      | "activateOnlyKYCAddress"
      | "adminProjectRouter"
      | "committee"
      | "isActivatedOnlyKYCAddress"
      | "kyc"
      | "setAcceptedKYCLevel"
      | "setAdminProjectRouter"
      | "setCommittee"
      | "setKYC"
      | "setTransferRouter"
      | "transferRouter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminProjectRouterSet"
      | "CommitteeSet"
      | "TransferRouterSet"
  ): EventFragment;

  encodeFunctionData(functionFragment: "PROJECT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptedKYCLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateOnlyKYCAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminProjectRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "committee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isActivatedOnlyKYCAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kyc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAcceptedKYCLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminProjectRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommittee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setKYC", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setTransferRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRouter",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "PROJECT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptedKYCLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateOnlyKYCAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminProjectRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "committee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isActivatedOnlyKYCAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kyc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAcceptedKYCLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminProjectRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommittee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKYC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTransferRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRouter",
    data: BytesLike
  ): Result;
}

export namespace AdminProjectRouterSetEvent {
  export type InputTuple = [
    oldAdmin: AddressLike,
    newAdmin: AddressLike,
    caller: AddressLike
  ];
  export type OutputTuple = [
    oldAdmin: string,
    newAdmin: string,
    caller: string
  ];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommitteeSetEvent {
  export type InputTuple = [
    oldCommittee: AddressLike,
    newCommittee: AddressLike,
    caller: AddressLike
  ];
  export type OutputTuple = [
    oldCommittee: string,
    newCommittee: string,
    caller: string
  ];
  export interface OutputObject {
    oldCommittee: string;
    newCommittee: string;
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRouterSetEvent {
  export type InputTuple = [
    oldTransferRouter: AddressLike,
    newTransferRouter: AddressLike,
    caller: AddressLike
  ];
  export type OutputTuple = [
    oldTransferRouter: string,
    newTransferRouter: string,
    caller: string
  ];
  export interface OutputObject {
    oldTransferRouter: string;
    newTransferRouter: string;
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccessController extends BaseContract {
  connect(runner?: ContractRunner | null): AccessController;
  waitForDeployment(): Promise<this>;

  interface: AccessControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PROJECT: TypedContractMethod<[], [string], "view">;

  acceptedKYCLevel: TypedContractMethod<[], [bigint], "view">;

  activateOnlyKYCAddress: TypedContractMethod<[], [void], "nonpayable">;

  adminProjectRouter: TypedContractMethod<[], [string], "view">;

  committee: TypedContractMethod<[], [string], "view">;

  isActivatedOnlyKYCAddress: TypedContractMethod<[], [boolean], "view">;

  kyc: TypedContractMethod<[], [string], "view">;

  setAcceptedKYCLevel: TypedContractMethod<
    [_kycLevel: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAdminProjectRouter: TypedContractMethod<
    [_adminProjectRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  setCommittee: TypedContractMethod<
    [_committee: AddressLike],
    [void],
    "nonpayable"
  >;

  setKYC: TypedContractMethod<[_kyc: AddressLike], [void], "nonpayable">;

  setTransferRouter: TypedContractMethod<
    [_transferRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  transferRouter: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PROJECT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptedKYCLevel"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activateOnlyKYCAddress"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "adminProjectRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "committee"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isActivatedOnlyKYCAddress"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "kyc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAcceptedKYCLevel"
  ): TypedContractMethod<[_kycLevel: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAdminProjectRouter"
  ): TypedContractMethod<
    [_adminProjectRouter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCommittee"
  ): TypedContractMethod<[_committee: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setKYC"
  ): TypedContractMethod<[_kyc: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTransferRouter"
  ): TypedContractMethod<[_transferRouter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferRouter"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminProjectRouterSet"
  ): TypedContractEvent<
    AdminProjectRouterSetEvent.InputTuple,
    AdminProjectRouterSetEvent.OutputTuple,
    AdminProjectRouterSetEvent.OutputObject
  >;
  getEvent(
    key: "CommitteeSet"
  ): TypedContractEvent<
    CommitteeSetEvent.InputTuple,
    CommitteeSetEvent.OutputTuple,
    CommitteeSetEvent.OutputObject
  >;
  getEvent(
    key: "TransferRouterSet"
  ): TypedContractEvent<
    TransferRouterSetEvent.InputTuple,
    TransferRouterSetEvent.OutputTuple,
    TransferRouterSetEvent.OutputObject
  >;

  filters: {
    "AdminProjectRouterSet(address,address,address)": TypedContractEvent<
      AdminProjectRouterSetEvent.InputTuple,
      AdminProjectRouterSetEvent.OutputTuple,
      AdminProjectRouterSetEvent.OutputObject
    >;
    AdminProjectRouterSet: TypedContractEvent<
      AdminProjectRouterSetEvent.InputTuple,
      AdminProjectRouterSetEvent.OutputTuple,
      AdminProjectRouterSetEvent.OutputObject
    >;

    "CommitteeSet(address,address,address)": TypedContractEvent<
      CommitteeSetEvent.InputTuple,
      CommitteeSetEvent.OutputTuple,
      CommitteeSetEvent.OutputObject
    >;
    CommitteeSet: TypedContractEvent<
      CommitteeSetEvent.InputTuple,
      CommitteeSetEvent.OutputTuple,
      CommitteeSetEvent.OutputObject
    >;

    "TransferRouterSet(address,address,address)": TypedContractEvent<
      TransferRouterSetEvent.InputTuple,
      TransferRouterSetEvent.OutputTuple,
      TransferRouterSetEvent.OutputObject
    >;
    TransferRouterSet: TypedContractEvent<
      TransferRouterSetEvent.InputTuple,
      TransferRouterSetEvent.OutputTuple,
      TransferRouterSetEvent.OutputObject
    >;
  };
}
