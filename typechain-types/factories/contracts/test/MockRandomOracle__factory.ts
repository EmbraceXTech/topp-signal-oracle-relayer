/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockRandomOracle,
  MockRandomOracleInterface,
} from "../../../contracts/test/MockRandomOracle";

const _abi = [
  {
    inputs: [],
    name: "caller",
    outputs: [
      {
        internalType: "contract IRandomOracleCaller",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "time",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "fulfillRandomness",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "time",
        type: "uint256",
      },
    ],
    name: "requestRandomness",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_caller",
        type: "address",
      },
    ],
    name: "setCaller",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506104ea8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806308868017146100515780637363ae1f1461006d578063beb92f5514610089578063fc9c8d39146100a5575b600080fd5b61006b60048036038101906100669190610266565b6100c3565b005b610087600480360381019061008291906102c6565b610157565b005b6100a3600480360381019061009e9190610351565b61015a565b005b6100ad61019d565b6040516100ba91906103dd565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663088680178484846040518463ffffffff1660e01b815260040161012093929190610482565b600060405180830381600087803b15801561013a57600080fd5b505af115801561014e573d6000803e3d6000fd5b50505050505050565b50565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b600080fd5b6000819050919050565b6101de816101cb565b81146101e957600080fd5b50565b6000813590506101fb816101d5565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261022657610225610201565b5b8235905067ffffffffffffffff81111561024357610242610206565b5b60208301915083602082028301111561025f5761025e61020b565b5b9250929050565b60008060006040848603121561027f5761027e6101c1565b5b600061028d868287016101ec565b935050602084013567ffffffffffffffff8111156102ae576102ad6101c6565b5b6102ba86828701610210565b92509250509250925092565b6000602082840312156102dc576102db6101c1565b5b60006102ea848285016101ec565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061031e826102f3565b9050919050565b61032e81610313565b811461033957600080fd5b50565b60008135905061034b81610325565b92915050565b600060208284031215610367576103666101c1565b5b60006103758482850161033c565b91505092915050565b6000819050919050565b60006103a361039e610399846102f3565b61037e565b6102f3565b9050919050565b60006103b582610388565b9050919050565b60006103c7826103aa565b9050919050565b6103d7816103bc565b82525050565b60006020820190506103f260008301846103ce565b92915050565b610401816101cb565b82525050565b600082825260208201905092915050565b600080fd5b82818337505050565b60006104328385610407565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561046557610464610418565b5b60208302925061047683858461041d565b82840190509392505050565b600060408201905061049760008301866103f8565b81810360208301526104aa818486610426565b905094935050505056fea26469706673582212206b1938eea75e0459d4d9e7fd3403bb1fd784916991458107914ef07de7d11a2364736f6c634300081b0033";

type MockRandomOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockRandomOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockRandomOracle__factory extends ContractFactory {
  constructor(...args: MockRandomOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockRandomOracle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockRandomOracle__factory {
    return super.connect(runner) as MockRandomOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockRandomOracleInterface {
    return new Interface(_abi) as MockRandomOracleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockRandomOracle {
    return new Contract(address, _abi, runner) as unknown as MockRandomOracle;
  }
}
